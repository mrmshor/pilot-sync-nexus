name: Build Native Mac Desktop App

on:
  push:
    branches: [ main, master ]
  workflow_dispatch:

jobs:
  build-macos:
    runs-on: macos-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Build React application (offline mode)
      run: |
        # Build for offline desktop app
        npm run build
        
    - name: Setup Capacitor for native Mac app
      run: |
        npx cap add ios
        npx cap sync ios
        
    - name: Configure iOS project for Mac
      run: |
        # Configure Info.plist for desktop app
        cd ios/App
        
        # Basic configuration
        /usr/libexec/PlistBuddy -c "Set :CFBundleDisplayName מערכת ניהול פרויקטים Pro" App/Info.plist || true
        /usr/libexec/PlistBuddy -c "Set :LSApplicationCategoryType public.app-category.productivity" App/Info.plist || true
        
    - name: Build native Mac desktop application
      run: |
        cd ios/App
        
        # Simple build without complex signing
        xcodebuild -workspace App.xcworkspace \
                   -scheme App \
                   -destination 'generic/platform=macOS,variant=Mac Catalyst' \
                   -configuration Release \
                   -derivedDataPath "../../build/DerivedData" \
                   CODE_SIGN_IDENTITY="" \
                   CODE_SIGNING_REQUIRED=NO \
                   CODE_SIGNING_ALLOWED=NO \
                   DEVELOPMENT_TEAM="" \
                   build
                   
    - name: Find and copy built app
      run: |
        # Find the built app
        APP_PATH=$(find build/DerivedData -name "*.app" -type d | head -1)
        echo "Found app at: $APP_PATH"
        
        if [ -z "$APP_PATH" ]; then
          echo "No app found, listing DerivedData contents:"
          find build/DerivedData -type d -name "*.app" || echo "No .app directories found"
          exit 1
        fi
        
        # Create staging and copy app
        mkdir -p dmg-staging
        cp -R "$APP_PATH" dmg-staging/
        
        # Rename to Hebrew name
        APP_NAME=$(basename "$APP_PATH")
        mv "dmg-staging/$APP_NAME" "dmg-staging/מערכת ניהול פרויקטים Pro.app"
                   
    - name: Create DMG installer for desktop app
      run: |
        # Verify app exists from previous step
        if [ ! -d "dmg-staging/מערכת ניהול פרויקטים Pro.app" ]; then
          echo "Error: Native desktop app not found"
          ls -la dmg-staging/
          exit 1
        fi
        
        # Create native desktop app DMG
        hdiutil create -volname "מערכת ניהול פרויקטים Pro" \
                       -srcfolder dmg-staging \
                       -ov -format UDZO \
                       -fs HFS+ \
                       "ProjectManager-Native-macOS.dmg"
                       
        # Verify DMG was created
        ls -lh ProjectManager-Native-macOS.dmg
        
    - name: Upload native desktop DMG
      uses: actions/upload-artifact@v4
      with:
        name: ProjectManager-Native-macOS-Desktop
        path: ProjectManager-Native-macOS.dmg
        retention-days: 30
        
    - name: Debug - List all files
      if: failure()
      run: |
        echo "=== Build directory ==="
        find build -type f -name "*.app" 2>/dev/null || echo "No .app files found in build"
        echo "=== Export directory ==="  
        find build/export -type d -name "*.app" 2>/dev/null || echo "No .app directories found"